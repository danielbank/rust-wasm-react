{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["locationStyle","x","y","position","top","left","DEFAULT_COLORS","App","useState","wasm","setWasm","coords","setCoords","colors","setColors","points","setPoints","epsilon","setEpsilon","minPoints","setMinPoints","colorStyle","cluster","background","loadWasm","a","console","error","message","useEffect","className","onMouseMove","e","clientX","clientY","onClick","find","point","newPoints","clusters","map","reduce","maxNum","curNum","length","Math","floor","random","toString","i","clusterPoints","type","onChange","newEpsilon","parseInt","target","value","newMinPoints","key","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4c2b86e2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction locationStyle(x, y) {\n\treturn {\n\t\tposition: 'absolute',\n\t\ttop: `${y - 4}px`,\n\t\tleft: `${x - 4}px`,\n\t};\n}\n\nconst DEFAULT_COLORS = ['red', 'green', 'blue'];\nconst DEFAULT_EPSILON = 40.0;\nconst DEFAULT_MIN_POINTS = 4;\n\nfunction App() {\n\tconst [wasm, setWasm] = useState(null);\n\tconst [coords, setCoords] = useState({ x: 0, y: 0 });\n\tconst [colors, setColors] = useState(DEFAULT_COLORS);\n\tconst [points, setPoints] = useState([]);\n\tconst [epsilon, setEpsilon] = useState(DEFAULT_EPSILON);\n\tconst [minPoints, setMinPoints] = useState(DEFAULT_MIN_POINTS);\n\n\tfunction colorStyle(cluster) {\n\t\tif (cluster < 0) return { background: 'white' };\n\t\treturn { background: colors[cluster] };\n\t}\n\n\tfunction epsilonHandler(e) {\n\t\tconst newEpsilon = parseInt(e.target.value) || 0;\n\t\tsetEpsilon(newEpsilon);\n\t\tsetPoints([]);\n\t\tsetColors(DEFAULT_COLORS);\n\t}\n\n\tfunction minPointsHandler(e) {\n\t\tconst newMinPoints = parseInt(e.target.value) || 0;\n\t\tsetMinPoints(newMinPoints);\n\t\tsetPoints([]);\n\t\tsetColors(DEFAULT_COLORS);\n\t}\n\n\tconst loadWasm = async () => {\n\t\ttry {\n\t\t\tconst wasm = await import('dbscan-wasm');\n\t\t\tsetWasm(wasm);\n\t\t} catch (err) {\n\t\t\tconsole.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tloadWasm();\n\t}, []);\n\n\tfunction mouseMoveHandler(e) {\n\t\tsetCoords({\n\t\t\tx: e.clientX,\n\t\t\ty: e.clientY,\n\t\t});\n\t}\n\n\tfunction clusterPoints({ x, y }) {\n\t\t// Skip if we haven't loaded the WASM Package or if the point is on the inputs or already exists\n\t\tif (!wasm) return false;\n\t\tif (x < 136 && y < 46) return false;\n\t\tconst existingPoint = points.find((point) => point.x === x && point.y === y);\n\t\tif (existingPoint) return false;\n\n\t\t// Find the clusters\n\t\tconst newPoints = [...points, { x, y }];\n\t\tconst clusters = wasm.cluster({\n\t\t\tpoints: newPoints.map((point) => [point.x, point.y]),\n\t\t\tepsilon: epsilon || 40,\n\t\t\tminPoints: minPoints || 4,\n\t\t});\n\n\t\t// If there are more clusters than how many cluster colors defined, add a random color\n\t\tconst maxClusterNum = clusters.reduce((maxNum, curNum) => {\n\t\t\tif (curNum > maxNum) return curNum;\n\t\t\treturn maxNum;\n\t\t}, 0);\n\t\tif (maxClusterNum === colors.length) {\n\t\t\tsetColors([...colors, `#${Math.floor(Math.random() * 16777215).toString(16)}`]);\n\t\t}\n\n\t\t// Lastly, set the cluster points\n\t\tsetPoints(\n\t\t\tnewPoints.map((point, i) => ({\n\t\t\t\t...point,\n\t\t\t\tcluster: clusters[i],\n\t\t\t}))\n\t\t);\n\t}\n\n\tfunction renderPoints() {\n\t\treturn points.map(({ x, y, cluster }) => {\n\t\t\treturn (\n\t\t\t\t<div key={`${x}-${y}`} style={locationStyle(x, y)}>\n\t\t\t\t\t<div className=\"circle\" style={colorStyle(cluster)} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className=\"App\" onMouseMove={mouseMoveHandler} onClick={() => clusterPoints(coords)}>\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" onChange={epsilonHandler} value={epsilon} />\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" onChange={minPointsHandler} value={minPoints} />\n\t\t\t</div>\n\t\t\t{renderPoints()}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}